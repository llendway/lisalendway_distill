[
  {
    "path": "posts/2021-01-22-teachingreflection/",
    "title": "Fall 2020 teaching reflection",
    "description": "Teaching was a lot different in the Fall of 2020. All my courses were online and the semester was cut in half. Here's what I learned.",
    "author": [
      {
        "name": "Lisa Lendway",
        "url": {}
      }
    ],
    "date": "2021-01-22",
    "categories": [],
    "contents": "\n\nContents\nModules and Zoom\nGoals in re-organizing Intro to Data Science\nWhat I did\nThings that went well\nThings that could improve more\nWhat do you do?\n\nLast Thursday I began my first day of teaching of the third module (I’ll tell you what that is in just a minute) of the year at Macalester College. I wanted to take some time to reflect on what has and has not gone well this year so far, largely so future me remembers but maybe someone out there in the wide world of the internet will also find it interesting.\nModules and Zoom\nAfter being thrown into online teaching in March of 2020, I was really looking forward to going back to in-person classes in the Fall 2020. But, by mid-summer, it was clear that this year of teaching would be anything but normal. Macalester made the decision to use modules, rather than semesters, so that we would have an easier time with any transitions that might need to happen mid-year. So, instead of students taking four courses in each of two, 15-week semesters, they would take two courses across four, 7.5 week modules. And those of us teaching full time would teach five courses across the four modules.\nAdditionally, we had strict policies (thankfully) around in-person learning, with distancing requirements, mask enforcement, etc. We also had certain periods of time where we were required to teach remotely, like at the beginning of the module after students first moved back to campus and between Thanksgiving and winter break. Since my class sizes were large and I needed to be able to see students’ computer screens up close, I taught all my classes completely online.\nGoals in re-organizing Intro to Data Science\nI feel very lucky that my teaching schedule had me teaching one section of Intro to Data Science in each of the first two modules and two more sections of it in the third module. This meant that, in the fall, I could concentrate on developing materials for that course and not have to think about much else work-wise.\nIn re-organizing my course, I was also very thankful to have a good base of materials that my colleagues and I had created. But, even before we moved online, I had some changes I wanted to make. Moving online made these even more necessary. Here were some of my goals:\nCreate videos to introduce new concepts and demo videos or screencasts of live coding. Make all of this material available to a larger audience than just my students.\nMore clearly align assignments with learning objectives in the course.\nProvide resources/readings where students can learn more about data visualization principles.\nBe more involved in grading and create assignments that allow me to interact more with students and give them quick feedback.\nIntroduce the students to the wider R community and encourage them to be part of it.\nWhat I did\nFirst, I should probably tell you about the course. In my syllabus, I describe the course as “An introductory data science course where we will collect, wrangle, graph, and model data to gain insights and help tell stories. We will do all of this in a reproducible way using R and R Studio.” And the learning objectives, include:\nAppreciate the role of data science in a wide range of disciplines across the social sciences, natural sciences, humanities, and fine arts.\nIdentify, collect, and wrangle data from multiple sources (e.g.: web scraping, existing datasets).\nUse the data visualization principles learned in the course to effectively create graphs that help gain insights or tell a story about the data.\nAssess the quality of graphs they see with specific focus on how the graphs might miscommunicate the underlying data or how they might do harm.\nConduct basic exploratory data analyses (eg: data visualization / numerical summaries of trend / prediction).\nFind code online and adapt it to the task at hand.\nWrite “friendly” R code that is easily read and adapted by others.\nCommunicate your results (both orally & in writing) so that they are reproducible and accessible for a broad audience.\nWork in a group of peers on a project, dividing the work equitably.\nIf you are interested in details of what we cover in the course, you can check out the course website, but I will also list some of the big topics:\nCreating graphs with ggplot2.\nWrangling data with dplyr.\nMore advanced wrangling (joins, pivoting, forcats, stringr, and some tidyr functions).\nMapping with ggmap, geom_map(), and leaflet.\nAnimation and interactivity, including ggplotly, gganimate, and very basic shiny.\nImporting, scraping, and nicely presenting data (rvest, patchwork, gt).\nBecause I just gave you a link to the course website above, you can already see that I succeeded in at least one task I set out to do! Yay! I made a course website and shared the material with the broader R community … via Twitter, of course. The course website includes tutorials with videos that introduce new concepts and code, screencasts where I do live coding, links to other resources, and practice problems with solutions. Students can download the slides that go with the intro videos right under the embedded video and they can download the R Markdown files, with and without code, that I go through in the screencasts.\nStudents were encouraged to watch the videos before coming to class and they seemed to do that, at least from what I saw by the number of views of the videos on YouTube. Most of class time was spent in breakout rooms where the students would work on assignments. I would visit breakout rooms to see if students had questions or I would remain in the “main” room so that students could return there from their breakout room to ask me questions.\nIn the past when I have taught this course, I did a small amount of lecturing to introduce material and students still spent a lot of time in class working on assignments (ie. homework). In these online modules, nearly all class time was spent in breakout rooms unless students had questions they wanted to discuss as an entire class, which rarely happened.\nDuring the first two modules, the students turned did roughty five different assignments each week. It sounds like a lot (ok, it was a little too much), but some assignments were short. Below I discuss and give examples of each assignment.\nReading/Tutorial Quizzes: short (5-7 questions) multiple choice Moodle quizzes that cover reading and tutorial activities. These serve to assure that students do the reading and tutorials before they are needed in class. There were five quizzes and I dropped the lowest score. The students also could take each quiz three times and I keep the highest of the three. They were graded automatically in Moodle (course management system).\nWeekly Exercises (homework): These exercises give the students deeper practice on both coding and short writing skills. They were always due on Tuesday evenings so students spent most of class time on Mondays and Tuesdays working on these assignments in breakout rooms. There were six of these assignments and I dropped the lowest score. These were graded by my class preceptors (aka teach assistants). In the past, this was the only type of assignment students turned in.\n\npreservef48dc71d10b73b16\n\nThe first set of weekly exercises tries to introduce the students to the R Studio IDE and does not have them do a lot of R coding.\n\npreservee0ee3984b022349d\n\nPerfect Garden Graph: This was my favorite assignment! And, it got a lot of positive feedback from students as well. I collected data about my vegetable garden from the summer of 2020 and created a few datasets (it’s now in an R package called gardenR). The students came up with a question to answer using this garden data. Then, each week, they submitted a graph using that data. This assignment focused on the details of the graph that we don’t usually have time for in weekly assignments and about writing nice code and annotating it. Students submitted their updated graph and code each week and I gave them feedback within a couple days that they would use to improve the graph for the next week. In the end, I collected all their final graphs and put them on a website so they could share it with their friends and family. I was so proud of what they created! See their work here. This assignment helped accomplish two goals: 1. It gave me an opportunity to check in with the students each week and give them feedback. 2. Since they were working on details of graphs, I assigned reading from Claus Wilke’s Fundamentals of Data Visualization and I got to see them using what they had learned!\n\npreserve5bfbf631d2a1646e\n\nTidy Tuesday: This was another successful type of assignment - participating in Tidy Tuesday! Each week, students were tasked with creating a graph from the data posted for Tidy Tuesday. The point of this assignment is three-fold. First, it is to hone their graphing skills. Students have to decide what graph to make and which questions to ask. I encourage them to be creative while also maintaining the integrity of the data. Second, it is an opportunity to work on coding together in groups. On Wednesdays in class, I put students into breakout rooms where I recommend that everyone in the room decide on the type of graph they would like to create together and take turns sharing their screens and code. Third, I hope that this introduces the students to the broader R community. I encourage them to tweet out their graphs, using the hashtag #TidyTuesday. Because some students don’t feel comfortable doing this, this module I created a class twitter account, @MacTidyTuesday, which they can tweet from. I also graded these assignments, which gave me another opportunity to interact with the students and see their progress. They did five of these assignments and I dropped the lowest score.\nDear Data: Sometimes it’s nice to take a break from technology. The Dear Data assignments were created to allow (really, force) students to do that. These assignments were a time for them to focus on data visualization principles and design and are based on a project by Giorgia Lupi and Stefanie Posavec. Each week, I posted a topic and the students collected their own data and created a graph from it, “by hand”. Some of them did use iPads to draw but they couldn’t use R or anything like that. They posted their graphs to Voicethread (a collaborative slideshow software) and voice recorded a less than one minute description. I enjoyed seeing what the students came up with and some of them were really creative. They did six of these assignments and I dropped their lowest score.\nProject: The project the students work on helps bring together all (or many) of the skills the students learn in the course. In short, I want them to tell an in-depth story with data. They find the data and choose the topic on their own. Their final product is either something like a blog post or a shiny app with a “user manual”. They spend the last week to week and a half of the course working on the final project.\n\npreservecbdf31946a448184\n\nThings that went well\nThis course is very much still a work in progress, and I learn something new every time I teach it. Overall, I was really happy with how the course went, especially being able to complete all the goals I set out for the course. Below I call out a few things I thought went particularly well.\nI like the addition of the Perfect Garden Graph, Tidy Tuesday, and Dear Data assignments. It allowed me to be very involved in giving feedback without taking up too much time. In prior versions of the class, I only gave feedback on quizzes (almost like short exams) and the final project, but the first quiz was a few weeks into the course. With these new assignments, I could see how students were doing in the first week of the course. If I thought they needed extra help, I could reach out to them directly. I also think these assignments helped the students think about the graph creation process much more than they had in the past. In weekly exercises, they are usually told which graph to make and they have to figure out the code to create it and interpret what they learned from it, but in these new assignments, they had to also decide the question to ask and how the data could help them answer that question.\nCreating videos to introduce material and code demonstration videos was very helpful. First, students who were not able to attend class had the resources they needed to learn the material and students could go over it as many times as they needed. Second, it allowed students to work through assignments during class time. So, if they had questions, I was there to answer them. Putting all of the resources for the class together on a course website was also helpful for the students so they didn’t have to keep track of things in various places.\nThis is completely unrelated to the material I taught. I made an effort to give positive feedback to students, both individually and as a group. These were often things that I would think in my head and would be bashful to say out loud for fear that I would for some reason embarrass students by complimenting them … not sure why I would think that. Each time I talked to a student individually, I would try to say something positive, even if it was something small like, “Great job writing readable code. I like that you pressed enter to make a new line of code after each of the plus signs.” Again, these were things I was already thinking in my head - I didn’t have to rack my brain to think of positive things to say. When I wrote messages to the whole class, I made sure to thank them for things like asking questions in class and helping each other solve problems. I also let them know I was proud of their work. I have always been proud of my students’ work, but I don’t think I’ve said it out loud nearly often enough. I don’t have quantitative evidence that this impacted my students, but I was glad I did it. I honestly don’t know why I waited so long to do it.\nThings that could improve more\nAnd here’s some places I will continue to try to improve the course\nIt turns out it’s hard (impossible?) to condense a 15 week semester into a 7.5 week module. After two modules of teaching this course, I realize the students were expected to do too many assignments. So, for this module, I have dropped the Dear Data assignments. I think during a regular semester, it would work well to alternate this assignment with Tidy Tuesday.\nWhen we switched to the module system, we also moved to having class 5 days/week for 1.25 hours each period. During the first module, I still held class every day but told students Thursdays were optional. During the 2nd module, I was struggling to have even half of the students show up to class, so I moved to only having class 4 days/week. And, this module, I have switched to having synchronous class only 3 days/week. The students are doing a lot of work for the class outside of the class, so this seems reasonable. I hope that students will enjoy being in class more since we won’t have it everyday.\nI am still looking for ways to interact better with the students on Zoom. So far, I have mostly been putting them into breakout rooms and having them work on assignments. Then, I visit the breakout rooms to check in and answer questions. This module, I am trying something different on Fridays. Rather than going into breakout rooms, we will all stay together and I will go through the coding demonstration for the week (they can also watch the pre-recorded video if they can’t attend). I will start it off, but I will ask for input from students and can have them share their screens. I am hoping this gets more students involved during synchronous class time.\nAnother thing I hope to work on later this year is incorporating {learnr} tutorials into the material. When I initially started creating materials for this class, I created it as a {learnr} tutorial (here can even try it out using the instructions here), but students were running into issues with it timing out, so I quickly gave up. Instead, I included hints and solutions to exercises later in each section of material. I think one solution might be to put only the exercises (without the YouTube videos and other things) in a {learnr} tutorial and link to that.\nWhat do you do?\nI love teaching data science and would love to hear about what other people are doing. Feel free to reach out via Twitter @lisalendway or email me.\n\n\n\n",
    "preview": "posts/2021-01-22-teachingreflection/monster_support.jpg",
    "last_modified": "2021-01-25T14:25:06-06:00",
    "input_file": "teachingreflection.utf8.md"
  },
  {
    "path": "posts/2020-12-30-welcometothejungle/",
    "title": "Welcome to the Jungle ... Garden",
    "description": "Creating an R data package and a fun dataset about my garden",
    "author": [
      {
        "name": "Lisa Lendway",
        "url": {}
      }
    ],
    "date": "2020-12-31",
    "categories": [],
    "contents": "\n\nContents\nThe Jungle Garden\nCollecting the Data\nCreating {gardenR}, a Data PackageStep 0: Make a hex sticker!\nStep 1: Read some great resources\nStep 2: Make the package\nStep 3: Share the package with others\n\n\nThe Jungle Garden\nI started vegetable gardening in 2004 and have been hooked ever since. During graduate school, while learning about split-plots and nested designs, I dreamed about experimenting in my own garden but never quite found the motivation.\nThis past summer I finally decided to at least collect some data from my garden. I did this for two reasons: 1. I was curious about how much food I produced. 2. I wanted to use the data in my Introductory Data Science course at Macalester College. I knew the data would be fairly simple and I liked that it would be a bit personal and give a way for me to connect with students. This felt especially important this year while I have been teaching remotely.\nI could spend a lot of time talking about my garden, but I’ll keep it brief. I plan to eventually put a post in my “Non-R Stuff” area for those who are into gardening as much as they are into R. But, for now, I’ll just show some photos of early season vs. late season garden. Hopefully this helps illustrate why I fondly refer to it as the jungle garden. Truthfully, the garden at my old house was more of a jungle since it sprawled across my backyard more, but I think this one is still worthy of the name.\n\n\n\nJungle Garden - beginning of season\n\nJungle Garden - peak season\n\nUnder the squash/pumpkin arch\nI am personally most proud of the brick paths - I laid each individual brick except for the occasional help from my kids and neighbor kids who I paid $.10/brick (thankfully they got bored quickly!). I also have to give my husband Chris credit for the fence and raised bed boxes, although I did make all the fence post holes (with a manual fence post digger!).\nCollecting the Data\nBefore I could make a data package, I had to collect the data. This was both an awful and great experience. I think anyone who analyzes data should have a go at collecting their own data at least once. Even in this very small endeavor of mine, I learned a lot.\nI took some time thinking about the data I might want to analyze and tried my best to set up spreadsheets to collect everything I thought I would need. I made four Google sheets:\nSpending: how much I spent on seeds, plants, etc. for the garden.\nPlanting dates: when, where, and how much of each seed/plant was planted\nHarvest data: how much of each vegetable variety was harvested. Each row is a “harvest” of a particular vegetable variety. So, each time I harvested a particular vegetable/variety combination, I weighed the entire harvest. There could be multiple harvests of a vegetable/variety combination in a single day. There are two exceptions: all pumpkin and winter squash (vegetable = “squash”) were weighed individually.\nPlot coordinates: grid coordinates to identify the various plots in the garden (see photo on right).\n\n\n\nFigure 1: Bird’s-eye view of garden\n\n\n\nI liked putting the data in Google sheets because I could use Jenny Bryan’s {googlesheets4} package to interact with the data as I was collecting it.\nAt the beginning the summer, I really enjoyed weighing all the harvests. It was exciting to see how much food we grew on our own! But, by mid-summer, I was already starting to get annoyed by having to collect the data. Do you notice there’s very little raspberry data? That’s because I ate it before I weighed it - usually while weeding the garden. I also noticed (just anecdotally) that I felt more pressure on myself to use all the food I harvested and not let any go to waste. So, I think my family and I did a good job eating even more of the veggies than usual and neighbors probably got annoyed with me asking them to please take some zucchinis off my hands.\nCreating {gardenR}, a Data Package\nAfter using the data I collected with two sections of my Introductory Data Science students, I decided it was time to package it up and share it with others. If you want to see examples of how I used the data, check out the tutorials on my course website.\nStep 0: Make a hex sticker!\nI started by coming up with the name for the data package and making a hex sticker. Is this where you should start? Probably not, but maybe? It gave me the motivation I needed to see it through. I used the {hexSticker} package by Guangchuang Yu to create mine. Check out more about that here. I also ordered way more stickers than I’ll probably ever need via stickermule - if you want some, get in touch with me :)\n\n\n\nStep 1: Read some great resources\nThe three resources I ended up using are:\nrstudio4edu Chapter 12: Create a data package by Desirée De Leon and Alison Hill. I’m pretty sure that everything I learn about R lately is from these two. Although they are both experienced R users, they are also amazingly good at writing tutorials and how-to’s from the perspective of someone who has never done the task before. I loved the “Is this tutorial for you?” checklist at the top of the section. Right away I knew - yes! That is me! This is for me!\nWriting an R Package from Scratch by Tomas Westlake, which is an update of Hilary Parker’s blog post on the same topic.\nR Packages book - really just section 18.9 and for looking at a second set of screenshots of documentation to make sure I did it correctly. There is probably a lot more I should read about in here, which I hope to do someday.\nStep 2: Make the package\nBecause there are already so many great resources out there, I am going to highlight how I used them, rather than make a new resource. I ended up using a combination of resources because I wasn’t able to follow any of the instructions exactly, without running into differences or errors. There is a good chance this is due to some mistakes I made along the way.\nLoad required libraries. This step seemed to be the same across all resources.\n\n\n\nCreate the package. I used steps 1-3 of the “though we don’t recommend starting this way” way of creating a data package project in the section 12.3.2 of the rstudio4edu material (scroll to the bottom of the section): 1. click File > New Project > New Directory, 2. select R Package, 3. Put in a package name, click create git repository (my addition), and click Create Project. I did this because when I tried first creating the GitHub repo, I couldn’t clone the repo without having a README (again, this is probably my error). After it runs, many new files will be created for you. This will give you a great start to your data package.\n\nCreate the project\nSynchronize with GitHub. Because I didn’t do this first, I wanted to make sure to do it as soon as possible. I tried using the use_github() function from {usethis} as recommended by both rstudio3edu and Westlake resources, but I couldn’t get it to work. So, instead, I followed the instructions in section 18.9 of R Packages: 1. Create a new GitHub repo with the same name as your package without a README. 2. After doing this, an instruction page opens that tells you to copy and paste some code into a shell - do that. The code I had to copy was this - yours will be similar but specific to your package and GitHub username:\ngit remote add origin https://github.com/llendway/gardenR.git\ngit branch -M main\ngit push -u origin main\nAfter I had it synched with GitHub, I used Parts 2-6 (Sections 12.4-12.8) of the rstudio4edu resource. I followed their steps exactly - they even remind you to commit!\nAdd a README. I wanted a nice page to welcome people. I followed Steps 8 & 9 of Writing an R Package from Scratch to help me create a nice README file that includes the hex sticker logo :)\nStep 3: Share the package with others\nThat’s what I plan to do very soon on Twitter. If you are reading this, it probably means I did it. Check out the {gardenR} package repo here.\n\n\n\n",
    "preview": "posts/2020-12-30-welcometothejungle/gardenr.png",
    "last_modified": "2020-12-31T12:13:54-06:00",
    "input_file": {},
    "preview_width": 518,
    "preview_height": 600
  },
  {
    "path": "posts/2020-12-09-buildingdistill/",
    "title": "Building a {distill} website",
    "description": "A journey through how this website came to be",
    "author": [
      {
        "name": "Lisa Lendway",
        "url": {}
      }
    ],
    "date": "2020-12-18",
    "categories": [],
    "contents": "\n\nContents\nWhy a website?\nResources\nBuilding the siteSetting up a GitHub repo & starting the project\n\nBuilding the site for the first time\nCustomize the home page\nAdd the blog and create your first post\nFurther modify _site.yml\nPublish the site via netlify\nMake it yours!\n\nWhy a website?\nWell, I finally did it! I made a website. And to celebrate, I’m going to share how I did it. And, why did I do it? Two main reasons: 1. to share materials that might be useful for others, 2. to document some things for myself all in one place.\nI opted for a {distill} site because it seemed like it would allow me enough freedom to customize my site and not so much freedom that I would get bogged down in details (ie. choosing colors … oops, I still spent a lot of time on that).\nResources\nBefore I start, I want to share some of the resources I used.\nAlison Hill and Desirée De Leon’s webinar about Sharing on Short Notice. WATCH THIS before going any further. This is where I was first introduced to netlify and it blew my mind how easy it was to turn my html files into a website. You might even start with that first before jumping into a website. You also might find you like some of the other options they discuss more than {distill}.\nThe distill documentation, which also happens to be a … distill website!\nOther people’s distill websites: Ijeamaka Anyene, Shannon Pileggi(aka Piping Hot Data), Miles McBain, Tom Mock, and more!\nAlison Hill’s website for A+ content and design inspiration. I think I find a new resource every time I visit her site. For example, check out her talk on Recent updates in the R markdown family.\nAnd more! I’ll try to make note of difference resources I used throughout the blog.\nIf you would like to follow along with the video I created, find it here.\nBuilding the site\nNow, let’s get on to creating the site. I am going to embed YouTube videos along the way. This is actually all the same YouTube video, but I will set them at the point I am discussing so it’s easier for you to skip parts if you’d like.\nSetting up a GitHub repo & starting the project\nSee Tom Mock’s post here. I think his way of doing this makes more sense than mine. Unfortunately, I saw it after I did mine :(\nI’m trying to get into the habit of starting all my projects with a GitHub repo. So, that’s what I did here, too. Here are all the steps:\nCreate a repo\nCreate project in R Studio by cloning the repo\nLoad {distill} library\nCreate a “starter” site using the create_website() function. I used this rather than create_blog() because I wanted to to make my main page an About page rather than the blog. I will add the blog part later. Read the {distill} documentation to help you decide which you should do. Because I created my GitHub repo first, I had to do some weird things to fix the folder structure. It works, but it’s a little ugly.\nMove all files except the .Rproj one from the folder just created to the main repository folder.\nDelete the website folder (should be empty except the .Rproj file).\nDelete the README.md file in the main repository folder (when I didn’t, the site wouldn’t build later).\n\nOr follow along in the video (through minute 8:04):\n\n\nBuilding the site for the first time\nNext, we want to build the site. In order to do this in an easy way, save all your files, close R Studio and reopen it, making sure to be in the project for your distill site. When you do this, a Build tab should appear in your panel in the upper right corner (or wherever you typically have your Environment, History, etc.). Click the Build Website icon and you should see your site! (8:25 in the video, if you want to see me do it.)\nAt this point, there are many different directions you could go. I’ll tell you about what I did. If you don’t want to do a lot more customization, you can jump to ?? to find out an easy way to publish your website.\nCustomize the home page\nI wanted my “Home” page to be my “About” page. To do this, I first made some changes to the _site.yml file, deleting the “About” portion of the navbar and renaming the text for the homepage, “About”.\nThen, to start customizing my “About” page, I add a photo of myself to the index.Rmd file and put in some placeholders for places I will write some information.\nFollow along in the video (through minute 17:35):\n\n\nAdd the blog and create your first post\nIf you went the blog route from the beginning, you won’t need to do this part. Note that in the video, I did things in the wrong order\nAdd a post using create_post(\"mypost\"). This will generate an R Markdown file with the name mypost.Rmd (unless you change the slug), a _posts folder, and a folder that is titled with the date and the name of the post. By starting with the date, it will keep your posts in a nice order :)\nEdit your blog post R markdown file at will. Be sure to knit this file so that it shows up on the blog. These files are not knit automatically. That is purposeful.\nCreate a new R Markdown file with ONLY a yaml heading with a title and listing. Save it to the main repository.\nModify the _site.yml file to link the listing page. The text can be whatever you would like - this is what will show up on the navbar. The href value is the .html of the listing .Rmd file.\nAdd a customized blog preview image. Put the image you want to use in the folder for the blog post. In the yaml heading of your blog’s R Markdown file, add preview: image.png where image.png is the name of your image. By default, the preview will be the first plot generated in your R code.\nFollow along in the video (through minute 33:27):\n\n\nFurther modify _site.yml\nIn this part, I add some custom icons to the top navbar of the site. These include a personal favicon on the left side (I end up getting rid of it, though) and links to my GitHub, LinkedIn, and twitter pages (and later I add one to my YouTube channel).\nAdd the following to the _site.yml file after the navbar heading. Be careful of indentation. You can check out my file here (I have edited more since making the video, though).\n- icon: fa fa-github\n  href: https://github.com/YOUR_USERNAME\n- icon: fa fa-linkedin\n  href: https://www.linkedin.com/in/YOUR_LINKEDIN/\n- icon: fa fa-twitter\n  href: https://twitter.com/YOUR_TWITTER\nTo add a personalized favicon, add the following after navbar:, where ll.png is personal favicon. You can also add a link to a website where it goes when you click on it. Again, be careful of indenting.\n  logo:\n    image: ll.png\nFollow the video below (through minute 44:22). When I did this the first time, I made some mistakes, so I have you skipping through that part of the video.\n\n\nPublish the site via netlify\nNow that you have a website, you can easily publish it via netlify. I will show you how to link it to your GitHub repo so that every time to you push changes to GitHub, your website will reflect those changes. I recommend setting up an account on netlify first.\nWatch the video to see how I do it (through minute 48:22):\n\n\nMake it yours!\nThe last piece is to do some customization. Thanks to the wonderful {distill} authors, we can use the create_theme() function to guide us through modifying some css. I am a complete novice when it comes to css, so having an easier way to work with it is extremely helpful. I highly recommend reading through the documentation about theming and the recent updates. And read thoroughly (I may not have done that the first time)!\nUse create_theme(\"my_theme\") to generate a my_theme.css file with some starter css code.\nMake changes as desired.\nAt the bottom, you can add custom css, too. In the video, I only made one change using custom css - changing the background color. And I did it incorrectly! I tried putting it in the middle of the {distill} css code, but I needed to put it at the bottom, after the {distill} css. You can see where I do it correctly in my current css file.\nAdd theme: \"my_theme.css\" to the bottom of the _site.yml file.\nYou can watch the video until the end, if you’d like:\n\n\n\n\n\n",
    "preview": "posts/2020-12-09-buildingdistill/blog_distill_photo.png",
    "last_modified": "2020-12-18T13:52:53-06:00",
    "input_file": {},
    "preview_width": 1628,
    "preview_height": 1042
  }
]
